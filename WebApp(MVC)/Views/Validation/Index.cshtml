@{
    ViewData["Title"] = "SyncValidate";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prismjs/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #3c6382;
            --secondary-color: #0a3d62;
            --accent-color: #60a3bc;
            --success-color: #44bd32;
            --info-color: #0097e6;
            --warning-color: #e1b12c;
            --danger-color: #c23616;
            --light-color: #f5f6fa;
            --dark-color: #2f3640;
            --border-radius: 10px;
            --box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        body {
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            transition: var(--transition);
        }

        .container {
            max-width: 1400px;
        }

        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            overflow: hidden;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
            }

        .card-header {
            border-bottom: none;
            padding: 1.25rem 1.5rem;
            font-weight: 600;
            background: linear-gradient(135deg, var(--accent-color), var(--info-color));
            color: white;
        }

        .code-editor {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            line-height: 1.5;
            border-radius: var(--border-radius);
            border: 2px solid #dee2e6;
            padding: 15px;
            transition: var(--transition);
            resize: vertical;
            min-height: 300px;
        }

            .code-editor:focus {
                border-color: var(--accent-color);
                box-shadow: 0 0 0 0.25rem rgba(96, 163, 188, 0.25);
                outline: none;
            }

        .theme-switch {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            align-items: center;
            background-color: white;
            padding: 8px 12px;
            border-radius: 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .form-check-input {
            margin-right: 8px;
            cursor: pointer;
        }

        .form-check-label {
            cursor: pointer;
            margin-bottom: 0;
        }

        .dark-mode {
            background-color: var(--dark-color);
            color: #f1f1f1;
        }

            .dark-mode .card {
                background-color: #3d3d3d;
                border-color: #555;
            }

            .dark-mode .code-editor {
                background-color: #2d2d2d;
                color: #f1f1f1;
                border-color: #555;
            }

            .dark-mode .alert-info,
            .dark-mode .alert-success,
            .dark-mode .alert-danger {
                background-color: #3d3d3d;
                color: #f1f1f1;
                border-color: #555;
            }

        .loading-spinner {
            display: none;
            margin: 20px auto;
        }

        .file-drop-zone {
            border: 2px dashed #dee2e6;
            border-radius: var(--border-radius);
            padding: 30px;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            background-color: rgba(240, 240, 240, 0.5);
        }

            .file-drop-zone:hover {
                border-color: var(--accent-color);
                background-color: rgba(96, 163, 188, 0.1);
            }

            .file-drop-zone i {
                font-size: 3rem;
                color: var(--accent-color);
                margin-bottom: 10px;
            }

        .validation-badge {
            position: absolute;
            top: -10px;
            right: -10px;
            padding: 10px;
            border-radius: 50%;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 10;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: 500;
            transition: var(--transition);
        }

        .btn-lg {
            padding: 12px 24px;
            font-weight: 600;
        }

        .btn-success {
            background-color: var(--success-color);
            border-color: var(--success-color);
        }

            .btn-success:hover {
                background-color: #3ea12a;
                border-color: #3ea12a;
                transform: translateY(-2px);
            }

        .btn-light {
            background-color: rgba(255, 255, 255, 0.9);
            color: var(--dark-color);
        }

            .btn-light:hover {
                background-color: #fff;
                transform: translateY(-2px);
            }

        .btn-outline-primary {
            color: var(--accent-color);
            border-color: var(--accent-color);
        }

            .btn-outline-primary:hover {
                background-color: var(--accent-color);
                color: white;
                transform: translateY(-2px);
            }

        .btn i {
            margin-right: 6px;
        }

        .alert {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        }

        pre {
            border-radius: var(--border-radius);
            border: 1px solid rgba(0, 0, 0, 0.1);
            max-height: 400px;
        }

        .badge {
            padding: 7px 12px;
            border-radius: 50px;
            font-weight: 500;
            margin: 0 5px;
        }

        .display-4 {
            font-weight: 700;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-fill-color: transparent;
        }

        .lead {
            color: #666;
            font-size: 1.3rem;
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 600;
            color: #555;
            margin-bottom: 0.5rem;
        }

        .alert, .card, .btn, .badge, .file-drop-zone {
            animation: fadeIn 0.5s ease-in-out;
        }

        .smaller-text {
            font-size: 19px;
        }
       #extractedFormInfo {
    background-color: #f8f9fa;
    border-left: 4px solid #0d6efd;
    border-radius: 4px;
    padding: 12px 15px;
}

    #extractedFormInfo i {
    font-size: 1.2rem;
    color: #0d6efd;
    }

    #extractedFormInfo strong {
        font-weight: 600;
    }

        #extractedFormInfo small {
            font-size: 0.85rem;
        }

        .code-editor::first-line {
            color: #0d6efd;
            font-weight: bold;
        }


        #extractedFormInfo {
            background-color: #f8f9fa;
            border-left: 4px solid #0d6efd;
            border-radius: 4px;
            padding: 12px 15px;
            transition: all 0.3s ease;
        }

            #extractedFormInfo i {
                font-size: 1.2rem;
                color: #0d6efd;
            }

            #extractedFormInfo strong {
                font-weight: 600;
            }

            #extractedFormInfo small {
                font-size: 0.85rem;
                opacity: 0.8;
            }

        .dark-mode #extractedFormInfo {
            background-color: #2d3748;
            border-left-color: #4299e1;
        }
    </style>
</head>
<body>
    <div class="container py-5">
        <!-- Header Section -->
        <div class="text-center mb-5">
            <h1 class="display-4 fw-bold mb-3">SyncValidate</h1>
            <h6 class="display-4 fw-bold mb-3 smaller-text">Unified validation generator</h6>
            <p class="lead">Validate your React application with real-time syntax highlighting and generate C# models</p>
            <div class="d-flex justify-content-center gap-3 mb-2">
                <span class="badge bg-primary">React</span>
                <span class="badge bg-secondary">JSX</span>
                <span class="badge bg-success">Validation</span>
                <span class="badge bg-info">C# Models</span>
                <span class="badge bg-warning">Zip</span>
            </div>
        </div>
        <!-- Main Content -->
        <div class="row g-4">
            <!-- Input Section -->
            <div class="col-lg-6">
                <div class="card shadow-lg h-100 position-relative">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="bi bi-code-square me-2"></i>Code Input
                        </h4>
                        <button class="btn btn-sm btn-light" id="clearBtn">
                            <i class="bi bi-trash"></i> Clear
                        </button>
                    </div>
                    <div class="card-body">
                        <form id="validationForm" enctype="multipart/form-data">
                            <div class="form-group mb-4">
                                <label for="jsxCode" class="form-label">
                                    <i class="bi bi-code me-1"></i>JSX Code (optional):
                                </label>
                                <textarea id="jsxCode" class="form-control code-editor" rows="12" placeholder="Enter your JSX code here or upload a React project..." spellcheck="false"></textarea>
                            </div>
                            <div class="file-drop-zone mb-4" id="dropZone">
                                <i class="bi bi-cloud-upload"></i>
                                <p class="mb-2 fw-bold">Drag & drop your React project (ZIP) or JSX file here</p>
                                <small class="text-muted d-block mb-2">or</small>
                                <input type="file" id="reactFormFile" class="d-none" accept=".jsx,.js,.tsx,.ts,.zip" />
                                <button type="button" class="btn btn-outline-primary" id="browseBtn">
                                    <i class="bi bi-folder"></i> Browse Files
                                </button>
                                <small class="text-muted d-block mt-2">Accepted: .jsx, .js, .tsx, .ts or .zip of React project</small>
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-success btn-lg">
                                    <i class="bi bi-check-circle"></i> Validate Code
                                </button>
                            </div>
                        </form>

                        <!-- Update this section in your index.cshtml -->
                        <div id="extractedFormInfo" class="alert alert-info d-none mb-4">
                            <div class="d-flex align-items-start">
                                <i class="bi bi-file-earmark-zip me-2 mt-1"></i>
                                <div>
                                    <h6 class="mb-2">Extracted Forms from ZIP:</h6>
                                    <div id="extractionProgress" class="mb-2">
                                        <div class="progress" style="height: 6px;">
                                            <div id="extractionProgressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                                                 role="progressbar" style="width: 0%"></div>
                                        </div>
                                        <small id="progressText" class="text-muted">Processing files...</small>
                                    </div>
                                    <ul id="extractedFormsList" class="list-group list-group-flush">
                                        <!-- Forms will be added dynamically here -->
                                    </ul>
                                    <div id="mainFormInfo" class="alert alert-success mt-2 mb-0 d-none">
                                        <i class="bi bi-star-fill me-1"></i>
                                        <span>Main form detected: </span>
                                        <strong id="mainFormName"></strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Results Section -->
            <div class="col-lg-6">
                <div class="card shadow-lg h-100 position-relative">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="bi bi-ui-checks me-2"></i>Validation Results
                        </h4>
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-light" id="copyBtn">
                                <i class="bi bi-clipboard"></i> Copy
                            </button>
                            <button class="btn btn-sm btn-light" id="generateModelBtn" disabled>
                                <i class="bi bi-code-slash"></i> Generate C# Model
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Loading Spinner -->
                        <div class="loading-spinner text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 fw-medium">Validating your code...</p>
                        </div>
                        <!-- Loading Spinner for Model Generation -->
                        <div class="loading-spinner-model text-center d-none">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3 fw-medium">Generating C# Model...</p>
                        </div>
                        <!-- Results Content -->
                        <div id="validationResult" class="alert alert-info d-none">
                            <h5 class="d-flex align-items-center gap-2 mb-3">
                                <i class="bi bi-info-circle text-info"></i> Validation Rules:
                            </h5>
                            <pre id="jsonOutput" class="bg-light p-3 rounded mb-0 overflow-auto"></pre>
                        </div>
                        <div id="modelResult" class="alert alert-success d-none">
                            <h5 class="d-flex align-items-center gap-2 mb-3">
                                <i class="bi bi-code-slash text-success"></i> Generated C# Model:
                                <button class="btn btn-sm btn-outline-success" id="copyModelBtn">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-success" id="downloadModelBtn">
                                    <i class="bi bi-download"></i>
                                </button>
                            </h5>
                            <pre id="modelOutput" class="bg-light p-3 rounded mb-0 overflow-auto"></pre>
                        </div>
                        <div id="errorResult" class="alert alert-danger d-none">
                            <h5 class="d-flex align-items-center gap-2 mb-3">
                                <i class="bi bi-exclamation-triangle text-danger"></i> Error:
                            </h5>
                            <p id="errorMessage" class="mb-0"></p>
                        </div>
                        <div id="projectInfo" class="alert alert-secondary d-none">
                            <h5 class="d-flex align-items-center gap-2 mb-3">
                                <i class="bi bi-folder text-secondary"></i> Project Information:
                            </h5>
                            <div id="projectFiles" class="mb-2"></div>
                            <div id="mainFormFile" class="fw-bold"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prismjs/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prismjs/1.29.0/components/prism-jsx.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prismjs/1.29.0/components/prism-csharp.min.js"></script>

    <script>
        $(document).ready(function () {
            let validationData = null;
            let uploadedProjectFiles = [];

            // File drag and drop handling
            const dropZone = $('#dropZone');
            dropZone.on('dragover', function (e) {
                e.preventDefault();
                $(this).addClass('border-primary bg-light');
            });
            dropZone.on('dragleave', function (e) {
                e.preventDefault();
                $(this).removeClass('border-primary bg-light');
            });
            dropZone.on('drop', function (e) {
                e.preventDefault();
                $(this).removeClass('border-primary bg-light');
                const file = e.originalEvent.dataTransfer.files[0];
                if (file) {
                    handleFile(file);
                }
            });

            // Browse button handling
            $('#browseBtn').click(function () {
                $('#reactFormFile').click();
            });
            $('#reactFormFile').change(function (e) {
                const file = e.target.files[0];
                if (file) {
                    handleFile(file);
                }
            });
            function handleFile(file) {
                const fileType = file.name.split('.').pop().toLowerCase();

                if (fileType === 'zip') {
                    // For ZIP files, show a more informative message
                    $('#jsxCode').val(`// Processing React project: ${file.name}\n// The form components will be extracted and validated`);
                    uploadedProjectFiles = [];
                    $('#projectInfo').addClass('d-none');
                } else {
                    // For regular JSX/JS files, read the content
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        $('#jsxCode').val(`// Validating file: ${file.name}\n${e.target.result}`);
                        uploadedProjectFiles = [];
                        $('#projectInfo').addClass('d-none');
                    };
                    reader.readAsText(file);
                }
            }

            // Clear button handling
            $('#clearBtn').click(function () {
                $('#jsxCode').val('');
                $('#reactFormFile').val('');
                $('#validationResult, #errorResult, #modelResult, #projectInfo').addClass('d-none');
                $('#generateModelBtn').prop('disabled', true);
                validationData = null;
                uploadedProjectFiles = [];
            });

            // Copy validation JSON button handling
            $('#copyBtn').click(function () {
                const jsonOutput = $('#jsonOutput').text();
                navigator.clipboard.writeText(jsonOutput).then(function () {
                    const originalText = $('#copyBtn').html();
                    $('#copyBtn').html('<i class="bi bi-check"></i> Copied!');
                    setTimeout(function () {
                        $('#copyBtn').html(originalText);
                    }, 2000);
                });
            });

            // Copy model button handling
            $('#copyModelBtn').click(function () {
                const modelOutput = $('#modelOutput').text();
                navigator.clipboard.writeText(modelOutput).then(function () {
                    const originalText = $('#copyModelBtn').html();
                    $('#copyModelBtn').html('<i class="bi bi-check"></i>');
                    setTimeout(function () {
                        $('#copyModelBtn').html(originalText);
                    }, 2000);
                });
            });

            // Download model button handling
            $('#downloadModelBtn').click(function () {
                const modelCode = $('#modelOutput').text();
                const blob = new Blob([modelCode], { type: 'text/plain' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'ValidationModel.cs';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            });

            // Generate model button handling
            $('#generateModelBtn').click(function () {
                if (!validationData) {
                    $('#errorResult').removeClass('d-none').addClass('d-block');
                    $('#errorMessage').text('No validation data available. Please validate your code first.');
                    return;
                }
                $('#modelResult').addClass('d-none');
                $('.loading-spinner-model').removeClass('d-none');
                $.ajax({
                    url: '/api/validation/convert-to-model',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(validationData),
                    xhrFields: { responseType: 'blob' },
                    success: function (blob) {
                        $('.loading-spinner-model').addClass('d-none');
                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const modelCode = e.target.result;
                            $('#modelResult').removeClass('d-none').addClass('d-block');
                            $('#modelOutput').text(modelCode);
                            Prism.highlightElement(document.getElementById('modelOutput'));
                        };
                        reader.readAsText(blob);
                    },
                    error: function (xhr, status, error) {
                        $('.loading-spinner-model').addClass('d-none');
                        $('#errorResult').removeClass('d-none').addClass('d-block');
                        try {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                $('#errorMessage').text(e.target.result);
                            };
                            reader.readAsText(xhr.response);
                        } catch (e) {
                            $('#errorMessage').text('Error generating C# model: ' + (xhr.responseText || error));
                        }
                    }
                });
            });

            // Form submission for validation
            $('#validationForm').submit(function (event) {
                event.preventDefault();
                const jsxCode = $('#jsxCode').val();
                const reactFormFile = $('#reactFormFile')[0].files[0];

                if (!jsxCode && !reactFormFile) {
                    $('#errorResult').removeClass('d-none').addClass('d-block');
                    $('#errorMessage').text('Please enter JSX code or upload a file.');
                    return;
                }

                $('#validationResult, #errorResult, #modelResult, #projectInfo').addClass('d-none');
                $('.loading-spinner').show();
                $('#generateModelBtn').prop('disabled', true);

                let formData = new FormData();
                if (jsxCode && !jsxCode.startsWith('// Uploaded React project:')) {
                    formData.append('JsxCode', jsxCode);
                }
                if (reactFormFile) {
                    formData.append('ReactFormFile', reactFormFile);
                }

                $.ajax({
                    url: '/api/validation/validate',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    // Update the success handler in the AJAX call
                    success: function (response) {
                        $('.loading-spinner').hide();
                        $('#validationResult').removeClass('d-none').addClass('d-block');

                        // Display the form name in the extractedFormInfo section
                        if (response.formName) {
                            $('#extractedFormInfo').removeClass('d-none');
                            $('#extractedFormName').html(`
            <strong>Validating form:</strong> ${response.formName}
            ${response.metadata ? `<small class="text-muted d-block">Found ${response.metadata.totalComponents} components with ${response.metadata.totalFields} validation rules</small>` : ''}
        `);
                        } else {
                            $('#extractedFormInfo').addClass('d-none');
                        }

                        // Check if the response contains project information
                        if (response.projectInfo) {
                            uploadedProjectFiles = response.projectInfo.projectFiles || [];
                            displayProjectInfo(response.projectInfo);
                            validationData = response;
                        } else {
                            validationData = response;
                        }

                        const formattedJson = JSON.stringify(validationData, null, 2);
                        $('#jsonOutput').text(formattedJson);
                        $('#generateModelBtn').prop('disabled', false);

                        const badge = $('<div class="validation-badge bg-success"><i class="bi bi-check-circle text-white"></i></div>');
                        $('.card:last').append(badge);
                        setTimeout(() => badge.fadeOut('slow', function () { $(this).remove(); }), 3000);
                    },
                    error: function (xhr, status, error) {
                        $('.loading-spinner').hide();
                        $('#errorResult').removeClass('d-none').addClass('d-block');
                        $('#errorMessage').text(xhr.responseText);
                        validationData = null;
                        uploadedProjectFiles = [];

                        const badge = $('<div class="validation-badge bg-danger"><i class="bi bi-x-circle text-white"></i></div>');
                        $('.card:last').append(badge);
                        setTimeout(() => badge.fadeOut('slow', function () { $(this).remove(); }), 3000);
                    }
                });
            });

            function displayProjectInfo(projectInfo) {
                $('#projectInfo').removeClass('d-none');
                const $projectFiles = $('#projectFiles').empty();
                const $mainFormFile = $('#mainFormFile').empty();

                // Display all project files
                if (projectInfo.projectFiles && projectInfo.projectFiles.length > 0) {
                    $projectFiles.append('<p>Project files:</p><ul class="list-unstyled"></ul>');
                    const $fileList = $projectFiles.find('ul');

                    projectInfo.projectFiles.forEach(file => {
                        const isFormFile = typeof file === 'object' ? file.isFormFile :
                            file.path.includes('Form.') || file.path.includes('App.');
                        const filePath = typeof file === 'object' ? file.path : file;
                        const iconClass = isFormFile ? 'bi-file-earmark-text text-primary' : 'bi-file-earmark';
                        $fileList.append(
                            `<li class="d-flex align-items-center gap-2 mb-1">
                    <i class="bi ${iconClass}"></i>
                    <span>${filePath}</span>
                    ${isFormFile ? '<span class="badge bg-primary ms-2">Form File</span>' : ''}
                </li>`
                        );
                    });
                }

                // Display main form file info
                if (projectInfo.mainFormName || projectInfo.mainFormFile) {
                    $mainFormFile.html(`
            <strong>Main form:</strong> ${projectInfo.mainFormName || 'N/A'}
            ${projectInfo.mainFormFile ? `<small class="text-muted d-block">${projectInfo.mainFormFile}</small>` : ''}
        `);
                }
            }

            });



            // Add this to your existing JavaScript
            function updateExtractionUI(response) {
                const extractedFormInfo = document.getElementById('extractedFormInfo');
                const extractedFormsList = document.getElementById('extractedFormsList');
                const mainFormInfo = document.getElementById('mainFormInfo');
                const mainFormName = document.getElementById('mainFormName');
                const progressBar = document.getElementById('extractionProgressBar');
                const progressText = document.getElementById('progressText');

                // Show the extraction panel
                extractedFormInfo.classList.remove('d-none');
                extractedFormsList.innerHTML = '';

                if (response.extractionProgress) {
                    // Update progress during processing (for real-time updates)
                    progressBar.style.width = `${response.extractionProgress.percentage}%`;
                    progressText.textContent = response.extractionProgress.message;

                    // Add each found form
                    response.extractionProgress.foundForms.forEach(form => {
                        const listItem = document.createElement('li');
                        listItem.className = 'list-group-item d-flex justify-content-between align-items-center py-2';
                        listItem.innerHTML = `
                <span>
                    <i class="bi bi-file-earmark-text me-1"></i>
                    ${form.name}
                    <small class="text-muted ms-2">${form.filePath}</small>
                </span>
                <span class="badge bg-primary rounded-pill">${form.type}</span>
            `;
                        extractedFormsList.appendChild(listItem);
                    });
                }

                // When processing is complete
                if (response.mainFormName) {
                    progressBar.classList.remove('progress-bar-animated');
                    progressBar.classList.remove('progress-bar-striped');
                    progressBar.classList.add('bg-success');
                    progressText.textContent = 'Processing complete';

                    mainFormInfo.classList.remove('d-none');
                    mainFormName.textContent = response.mainFormName;
                }
            }

            // Modify your form submission handler
            document.getElementById('validationForm').addEventListener('submit', async function (e) {
                e.preventDefault();

                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="bi bi-hourglass"></i> Processing...';

                try {
                    const formData = new FormData();
                    // Add your existing form data

                    // Make the API call
                    const response = await fetch('/api/validation/validate', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();

                    // Update the UI with extraction details
                    if (data.projectInfo) {
                        updateExtractionUI(data);
                    }

                    // Handle the rest of your response
                    // ...

                } catch (error) {
                    console.error('Error:', error);
                } finally {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="bi bi-check-circle"></i> Validate Code';
                }
            


        });
    </script>
</body>
</html>
